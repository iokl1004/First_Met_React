53. (실습) UI 컴포넌트 및 List 컴포넌트 구현하기

UI? 사용자가 입력을 할 수 있게 해주는 Component
Bottom up 방식으로 작은 부분부터 구현!

필요한 UI Component를 버튼 컴포넌트와 텍스트 입력 컴포넌트를 하나씩 UI폴더에 구현
---
(실습) Button 컴포넌트 만들기
(component/ui/Button.jsx)
import styled from "styled-components";

const StyledButton = styled.button`
    padding : 8px 16px;
    font-size : 16px;
    border-width : 1px;
    border-radius : 8px;
    cursor : pointer;
`;

function Button(props) {
    const { title, onClick } = props;

    return <StyledButton onClick={onClick}>{title || "button"}</StyledButton>;
}

export default Button;
---
(실습) TextInput 컴포넌트 만들기
(component/ui/TextInput.jsx)

// 사용자로부터 텍스트를 입력받을 수 있게 해주는 컴포넌트
import styled from "styled-components";

const StyledTextarea = styled.textarea`
    width : calc(100% - 32px);
    ${(props) =>
        props.height &&
        `
        height : ${props.height}px;
    `}
    padding : 16px;
    font-size : 16px;
    line-height : 20px;
`;

// 값을 표시하기 위한 value, 변경된 값을 상위 컴포넌트로 전달하기 위한 onChange가 있음.
function TextInput(props) {
    const { height, value, onChange } = props;

    return <StyledTextarea height={height} value={value} onChange={onChange} />;
}

export default TextInput;
---
(실습) List 컴포넌트 구현하기

(실습) PostListItem 컴포넌트 만들기
PostList 컴포넌트가 아닌 PostListItem 컴포넌트를 먼저 구현하는 이유는
PostList 컴포넌트에서 PostListItem 컴포넌트를 필요로 하기 때문!

(component/list/PostListItem.jsx)
import styled from "styled-components";

const Wrapper = styled.div`
    width: calc(100% - 32px);
    padding: 16px;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;
    border: 1px solid grey;
    border-radius: 8px;
    cursor: pointer;
    background: white;
    :hover {
        background: lightgrey;
    }
`;

const TitleText = styled.p`
    font-size: 20px;
    font-weight: 500;
`;

function PostListItem(props) {
    const { post, onClick } = props;

    return (
        <Wrapper onClick={onClick}>
            <TitleText>{post.title}</TitleText>
        </Wrapper>
    );
}

export default PostListItem;
---
(실습) PostList 컴포넌트 만들기

(component/list/PostList.jsx)
import styled from 'styled-components';
import PostListItem from './PostListItem';

const Wrapper = styled.div`
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;

    :not(:last-child) {
        margin-bottom: 16px;
    }
`;

// Post 객체들이 들어 있으며, 이 Post 배열의 맵 함수를 이용하여 각 Post 객체에 대해 PostList아이템 컴포넌트를 만들어 렌더링하게 됨.
function PostList(props) {
    const { posts, onClickItem } = props;

    return (
        <Wrapper>
            {posts.map((post, index) => {
                return (
                    <PostListItem
                        key={post.id}
                        post={post}
                        onClick={() => {
                            onClickItem(post);
                        }}
                    />
                );
            })}
        </Wrapper>
    );
}

export default PostList;
---
(실습) CommentListItem 컴포넌트 만들기
comment-list-item 컴포넌트는 스타일이 약간 다르다는 점을 제외하고는 PostListItem 컴포넌트와 거의 동일함.

(component/list/CommentListItem.jsx)
import styled from "styled-components";

const Wrapper = styled.div`
    width : calc(100% - 32px);
    padding : 16px;
    display : flex;
    flex-direction : column;
    align-items: flex-start;
    justify-content : center;
    border : 1px solid grey;
    border-radius : 8px;
    cursor : pointer;
    background : white;
    :hover {
        background : lightgrey;
    }
`;

const ContentText = styled.p`
    font-size : 14px;
`;

function CommentListItem(props) {
    const { comment } = props;

    return (
        <Wrapper>
            <ContentText>{comment.content}</ContentText>
        </Wrapper>
    );
}

export default CommentListItem;
---
(실습) CommentList 컴포넌트 만들기

(component/list/CommentList.jsx)
import styled from "styled-components";
import CommentListItem from "./CommentListItem";

const Wrapper = styled.div`
    display : flex;
    flex-direction : column;
    align-items : flex-start;
    justify-content : center;

    & > * {
        :not(:last-child) {
            margin-bottom : 16px;
        }
    }
`;

// props에는 comments 라는 배열이 들어오게 되며, 이 배열에는 comment 객체들이 들어 있음.
// 이 배열에 map 함수를 사용하여서 각 댓글 객체를 CommentListItem 컴포넌트로 넘겨 화면에 댓글을 표시함.
function CommentList(props) {
    const { comments } = props;

    return (
        <Wrapper>
            {comments.map((comment, index) => {
                return <CommentListItem key={comment.id} comment={comment} />;
            })}
        </Wrapper>
    );
}

export default CommentList;