24. useMemo, useCallback, useRef

useMemo란? Memoized value를 리턴하는 Hook
Memoization? 컴퓨터 분야에서는 최적화를 위해서 사용하는 개념이다. 비용이 높은, 즉 연산량이 많이 드는 함수의 호출 결과를 저장해 두었다가 같은 입력 값으로 함수를 호출하면 새로 함수를 호출하지 않고 이전에 저장해 놨던 호출 결과를 바로 반환 하는것. 이렇게 하면 결과적으로 함수 호출 결과를 받기까지 걸리는 시간도 짧아질 뿐 더러, 불필요한 중복 연산도 하지 않기 때문에 컴퓨터의 자원을 적게 사용이 됨.
메모를 해두었다가 나중에 다시 사용한다고 생각하면됨.

useMemo() 사용법
const memoizedValue = useMemo(
	() => {
		// 연산량이 높은 작업을 수행하여 결과를 반환
		return computeExpensiveValue(의존성 변수1, 의존성 변수2);
	},
	[의존성 변수1, 의존성 변수2]
);

의존성 배열을 넣지 않을 경우, 매 렌더링 마다 함수가 실행됨.
의존성 배열이 빈 배열일 경우, 컴포넌트 마운트 시에만 호출 됨.
---
useCallback()? useMemo() Hook과 유사하지만, 값이 아닌 함수를 반환을 함!
컴포넌트가 렌더링 될 때마다 매번 함수를 새로 정의하는 것이 아니라, 의존성 배열의 값이 변경 된 경우에만 함수를 새로 정의해서 리턴해줌.

useCallback() 사용법
const memopizedCallback = useCallback (
	() => {
		doSomething(의존성 변수1, 의존성 변수2);
	},
	[의존성 변수1, 의존성 변수2]
);

동일한 역할을 하는 두 줄의 코드
useCallback(함수, 의존성 배열);
useMemo(() => 함수, 의존성 배열);
---
useRef()
Reference를 사용하기 위한 Hook
레퍼런스란? 특정 컴포넌트에 접근 할 수 있는 객체.
useRef는 레퍼런스 객체를 반환하며, 레퍼런스 객체에는 current 라는 속성이 있는데, 이것은 현재 레퍼런스하고 있느 ㄴ엘리먼트를 의미한다고 보면 됨.
refObejct.current (현재 참조하고 있는 Element)

useRef() 사용법
const refContainer = useRef(초깃값);
useRef Hook은 변경 가능한 current 라는 속성을 가진 하나의 상자라고 생각하면됨.
useRef() Hook은 내부의 데이터가 변경되었을 때 별도로 알리지 않는다.
