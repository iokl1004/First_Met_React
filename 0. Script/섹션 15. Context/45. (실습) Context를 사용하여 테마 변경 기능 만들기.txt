45. (실습) Context를 사용하여 테마 변경 기능 만들기
컨텍스트를 사용하면 데이터를 컴포넌트 트리를 통해 곧바로 하위 컴포넌트로 전달 할 수 있으며, 데이터를 무조건 props를 통해서 전달하는 것보다 컨텍스트를 사용하여 깔끔하게 처리 할 수 있을지를 고민해보자!

(ThemeContext.jsx)
개발자 도구를 통해 컨텍스트의 이름을 확인 하기 위해서 displayName 값을 설정해 줌.

import React from "react";

const ThemeContext = React.createContext();
ThemeContext.displayName = "ThemeContext";

export default ThemeContext;
---
(MainContent.jsx)
메인 컨텐츠 컴포넌트는 Theme 컨텍스트로부터 현재 설정된 테마 값을 받아와 실제 화면의 컨텐츠를 렌더링 하는 역할을 하며, 또한 테마 변경 버튼을 누를 경우 Theme 컨텍스트로부터 받은 toggleTheme 함수를 호출하여 Theme 컨텍스트의 값을 변경하는 역할도 함.

import ThemeContext from "./ThemeContext";
import { useContext } from "react";

function MainContent(props) {
    const { theme, toggleTheme } = useContext(ThemeContext);

    return (
        <div
            style={{
                width: "100vw",
                height: "100vh",
                padding: "1.5rem",
                backgroundColor : theme == "light" ? "white" : "black",
                color: theme == "light" ? "black" : "white",
            }}
        >
            <p>안녕하세요, 테마 변경이 가능한 웹사이트 입니다.</p>
            <button onClick={toggleTheme}>테마변경</button>
        </div>
    );
}

export default MainContent;
---
(DarkORLight.jsx)
