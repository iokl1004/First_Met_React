49. styled-components

styled-components
CSS 문법을 그대로 사용하면서 결과물을 스타일링된 컴포넌트 형태로 만들어주는 오픈소스 라이브러리
컴포넌트 개념을 사용하기 때문에 React와 굉장히 궁합이 잘 맞음!

styled-components 설치
# npm을 사용하는 경우
npm install --save styled-components

#yarn을 사용하는 경우
yarn add styled-components

---
sryled-components 기본 사용법
tagged template literal : 자바스크립트에서 제공하는 문법 중 하나임.

프로그래밍에서 literal은 소스 코드에 고정된 값을 의미함.
let number = 20; // 20이 바로 literal 소스 코드상에 있는 고정된 값을 의미 함.

템플릿 리터럴은 말 그대로 리터럴을 템플릿 형태로 사용하는 자바스크립트의 문법인데, 우리가 흔히 역따옴표 라고 불리는 백틱스를 사용하여 문자열을 작성하고 그 안에 대체 가능한 익스프레션을 넣는 방법임.

const name = '장인기';
const region = '서울';

function myTagFunction(strings, nameExp, regionExp) {
	let str0 = strings[0];	// "제 이름은	"
	let str1 = strings[1];	// "이고, 사는 곳은 "
	let str2 = strings[2];	// "입니다."

	// 여기에서도  template literal을 사용하여 리턴할 수 있음
	return `${str0}${nameExp}${str1}${regionExp}${str2}`;
}

const output = myTagFunction`제 이름은 ${name}이고, 사는 곳은 ${region}입니다.`;

// 출력 결과
// 제 이름은 장인기 이고, 사는곳은 서울입니다.
console.log(output);

--- 
styled-copnponents 사용 예시

const Wrapper = styled.div`
	padding : 1em;
	background: grey;
`;
---
Styled 컴포넌트에서 조건이나 동적으로 변하는 값을 사용해서 스타일링은 props를 통해 가능하다!
예시
const Button = styled.button`
	color: ${props => props.dart ? "white" : "dark"};
	background : ${props => props.dark ? "balck" : "white"};
	border : 1px solid black;
`;

function Sample(props) {
	return (
		<div>
			<Button>Normal</Button>
			<Button dark>Dark</Button>
		</div>
	)
}

export default Sample;
---
styled-components의 스타일 확장하기

// Button 컴포넌트
const Button = styled.button`
	color : grey;
	border : 2px solid palevioletred;
`;

// Button에 style이 추가된 RoundedButton 컴포넌트
const RoundedButton = styled(Button)`
	border-radius : 16px;
`;

function Sample(props) {
	return (
		<div>
			<Button>Normal</Button>
			<RoundedButton>Rounded</RoundedButton>
		</div>
	)
}

export default Sample;