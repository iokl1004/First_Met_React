41. Composition 방법과 Inheritance

Composition : 여러 개의 컴포넌트를 합쳐서 새로운 컴포넌트를 만드는 것.
새로운 컴포넌트를 만드는 방법

containment : 하위컴포넌트를 포함하는 형태의 합성 방법, Sidebar나 Dialog같은 Box형태의 컴포넌트는 자신의 하위 컴포넌트를 미리 알 수 없다.
containment를 사용하는 방법은 children이라는 prop을 사용해서 조합하면됨.

function FancyBorder(props) {
	return (
		<div calssName={'FancyBorder FancyBorder-' + props.color}>
			{props.children}
		</div>
	);
}
---
React.createElement(
	type,
	[props],
	[...children]
)
---
FancyBorder 컴포넌트 안에 있는 모든 JSX 태그는 children으로 전달됨!
function WelcomeDialog(props) {
	return (
		<FancyBorder color="blue">
			<h1 className="Dialog-title">
				어서오세요
			</h1>
			<p className="Dialog-message">
				우리 사이트에 방문하신 것을 환영합니다!
			</p>
		</FancyBorder>
	);
}
---
여러 개의 children 집합이 필요한 경우는 어떻게 하면 될까?
이런 경우에는 별도로 props를 정의해서 각각 원하는 컴포넌트를 넣어주면 됨.
---

다음의 합성 방법은 스페셜라이제이션으로, 전문화, 특수화 라는 뜻을 갖고 있음.
WelcomeDialog는 Dialog의 특별한 케이스이다.
다이얼로그라는 것은 굉장히 범용적인 의미를 갖고 있음.
모든 종류의 다이얼로그를 다 포함하는 개념이라고 볼 수 있음.
반면 웰컴 다이얼로그는 누군가를 반기기 위한 다이얼로그라고 볼 수 있으며,
범용적인 의미가 아니라 좀 더 구체화 된 것임.

리액트에서는 컴포지션을 사용하여 스페셜라이제이션을 구현하게 됨.

Inheritance 라는 뜻은 상속 이라는 뜻을 갖고 있으며,
객체지향 프로그래밍에서 나온 개념이다.
다른 컴포넌트로부터 상속을 받아서 새로운 컴포넌트를 만드는 것을 딱히 추천 하지는 않고
컴포지션을 사용해서 개발하는것이 더 좋은 방법임.

복잡한 컴포넌트를 쪼개서 여러개의 컴포넌트로 만들고, 만든 컴포넌트들을 조합해서 새로운 컴포넌트들을 만들자!